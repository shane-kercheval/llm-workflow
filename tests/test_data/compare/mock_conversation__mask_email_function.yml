prompts:
  - Generate a function that masks email addresses.
  - Write a couple assertion statements validating the function.

model_1:
  description: Mock ChatGTP 3.5 Turbo
  responses:
    - |
      Sure! Here's a Python function that masks email addresses by replacing characters in the local part of the email with asterisks (*) while keeping the domain part intact:

      ```python
      def mask_email(email):
          local_part, domain = email.split('@')
          masked_local_part = '*' * len(local_part)
          masked_email = masked_local_part + '@' + domain
          return masked_email
      ```

      Example usage:

      ```
      email = 'example@example.com'
      masked_email = mask_email(email)
      print(masked_email)  # Output: ********@example.com
      ```

      This function splits the email address into the local part and the domain part using the `split()` method. Then, it creates a masked local part by replacing each character with an asterisk using the * operator and the `len()` function. Finally, it concatenates the masked local part with the domain part and returns the masked email address.
    - |
      Certainly! Here are a couple of assertion statements to validate the `mask_email()` function:

      ```python
      # Test case 1: Masking email with alphanumeric local part
      email1 = 'example123@example.com'
      assert mask_email(email1) == '***********@example.com'

      # Test case 2: Masking email with special characters in local part
      email2 = 'ex@mple@example.com'
      assert mask_email(email2) == '******@example.com'
      ```

      In the first test case, the email address `'example123@example.com'` has an alphanumeric local part. The expected masked email address is `'***********@example.com'`.

      In the second test case, the email address `'ex@mple@example.com'` has special characters in the local part. The expected masked email address is `'******@example.com'`.

      If both assertions pass without throwing any exceptions, it means that the `mask_email()` function is working correctly for these test cases.
model_2:
  description: Mock ChatGTP 4
  responses:
    - |
      Sure, here's a simple Python function that masks email addresses:

      ```
      def mask_email(email):
          try:
              email_parts = email.split('@')
              # Mask first part
              masked_part = email_parts[0][0] + "****" + email_parts[0][-1]
              # Combine masked part and domain
              masked_email = masked_part + '@' + email_parts[1]
              return masked_email
          except Exception as e:
              print("An error occurred: ", e)
              return None
      ```

      This function masks all characters of the local part of the email (before the '@') except for the first and last characters with asterisks ('*'). Please note that this is a simple masking function and may not be suitable for all use cases.
    - |
      Sure, here are a few assertion statements to validate the function:

      ```
      assert mask_email("john.doe@example.com") == "j****e@example.com"
      assert mask_email("jane_doe@example.com") == "j****e@example.com"
      assert mask_email("test@test.com") == "t****t@test.com"
      ```

      These assertions check that the function correctly masks the email addresses. If the function is working correctly, these assertions will pass silently. If the function is not working correctly, one or more of these assertions will raise an `AssertionError`.
model_regex:
  description: uses regex but does not import re so this code should fail if there isn't a preprocessor to import re
  responses:
    - |
      To mask emails using regular expressions (regex) in Python, you can create a function that searches for email addresses in a given text and replaces them with a mask, such as "@". Here's a Python function that does this:

      ```
      def mask_emails(text, mask="*****@*****"):
          # Define a regular expression pattern for matching email addresses
          email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'
          # Use re.sub() to replace matched email addresses with the mask
          masked_text = re.sub(email_pattern, mask, text)
          return masked_text

      # Example usage:
      text_with_emails = "Please contact john.doe@example.com for more information."
      masked_text = mask_emails(text_with_emails)
      print(masked_text)
      ```
      In this code:

          We import the re module for regular expressions.
          The mask_emails function takes two arguments: text (the input text containing email addresses) and mask (the string to replace email addresses with, defaulting to "@").
          We define a regular expression pattern email_pattern for matching email addresses. This pattern is a basic one and may not cover all possible valid email address formats, but it should work for many common cases.
          We use re.sub() to find and replace all occurrences of the email pattern in the input text with the specified mask.
          Finally, the function returns the modified text with email addresses masked.

      You can use this function to mask email addresses in any text by providing the input text as an argument.
    - |
      Certainly! Here are a couple of assertion statements to validate the mask_emails function:

      ```
      # Example usage:
      text_with_emails = "Please contact john.doe@example.com for more information."
      masked_text = mask_emails(text_with_emails)

      # Assertion 1: Check if the email address is masked in the result
      assert "john.doe@example.com" not in masked_text

      # Assertion 2: Check if the masked text has the correct format
      assert masked_text == "Please contact *****@***** for more information."
      ```

      In these assertions:

          Assertion 1 checks that the email address "john.doe@example.com" is not present in the masked_text. This ensures that the function has successfully masked the email address.

          Assertion 2 checks if the masked_text has the correct format, which is "Please contact @ for more information." This ensures that the function has replaced the email address with the specified mask.

      You can add these assertions to your code to ensure that the mask_emails function is working as expected and providing the desired masking behavior for email addresses.
